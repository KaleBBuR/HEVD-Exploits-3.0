#pragma once

#include <iostream>
#include <Windows.h>

class HEVD {
	const DWORD IO_CODE_BUFFER_OVERFLOW = 0x222003;
	const LPCSTR DEVICE_NAME = "\\\\.\\HackSysExtremeVulnerableDriver";
public:
	HEVD() { }
	HANDLE GetHandleToDevice(BOOLEAN debug) {
		HANDLE hDevice = nullptr;
		if (debug)
			std::printf("[+] Calling CreateFileA to obtain a handle to HEVD Driver\n");
		hDevice = CreateFileA(DEVICE_NAME, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
		if (hDevice == INVALID_HANDLE_VALUE) {
			if (debug)
				std::printf("[-] Error: Unable to obtain handle to HEVD Driver\n");
			return nullptr;
		}

		return hDevice;
	}

	VOID BufferOverflowStack(BOOLEAN debug);
	VOID BufferOverflowStackGS(BOOLEAN debug);
	VOID WriteWhatWhere(BOOLEAN debug);
	VOID NullPointerDereference(BOOLEAN debug);
	VOID IntegerOverflow(BOOLEAN debug);
	VOID UseAfterFree(BOOLEAN debug);
	VOID PagedPoolOverflow(BOOLEAN debug);
	VOID NonPagedPoolOverflow(BOOLEAN debug);
	VOID InsecureFileAccess(BOOLEAN debug);
};